## 📖 Table of Contents

1. [✨ Coding Standards](#-coding-standards)  
   1.1 [Code Formatting](#1-code-formatting)  
   1.2 [Naming Conventions](#2-naming-conventions)  
   1.3 [Documentation (JSDoc)](#3-documentation-jsdoc)  
   1.4 [File & Folder Organization](#4-file--folder-organization)  
   1.5 [Linting and Formatting](#5-linting-and-formatting)  
   1.6 [Styling with styled-components](#6-styling-with-styled-components)  
2. [🧠 Object-Oriented Design Principles](#-object-oriented-design-principles)  
   2.1 [Polymorphism](#1-polymorphism)  
   2.2 [Abstraction](#2-abstraction)  
   2.3 [Inheritance](#3-inheritance)  
   2.4 [Encapsulation](#4-encapsulation)  
3. [✅ Summary](#-summary)

# 📚 Project Coding Standards & Object-Oriented Design Principles

This document outlines the complete coding standards and object-oriented design principles followed by our team throughout the development of this project. These practices ensure maintainable, readable, and scalable code and promote consistency across all memebrs.

---

## ✨ Coding Standards

### 1. Code Formatting

- **Indentation:** All code uses 2 spaces for indentation—tabs are not permitted.
- **Line Length:** Code lines are kept within 80–100 characters to maintain readability.
- **Braces:** Opening braces are placed on the same line as control statements or declarations.

\`\`\`js
if (isCompleted) {
  markAsDone();
} else {
  resetForm();
}
\`\`\`

- **Single-line blocks** must also use braces for clarity and future extensibility.

---

### 2. Naming Conventions

#### 🔠 PascalCase
Used for React components and class names:

\`\`\`js
const TaskItem = () => { ... };
class ThemeProvider { ... }
\`\`\`

#### 🐫 camelCase
Used for variables, function names, and props:

\`\`\`js
const handleClick = () => { ... };
const isCompleted = true;
\`\`\`

#### 🔡 UPPER_SNAKE_CASE
Used for constants:

\`\`\`js
const MAX_TASKS = 100;
const DEFAULT_THEME = 'light';
\`\`\`

---

### 3. Documentation (JSDoc)

We document all major functions and components using JSDoc for clarity.

\`\`\`js
/**
 * Renders a submit button.
 * @param {string} label - The text displayed on the button.
 * @param {Function} onClick - Event handler for button click.
 */
const Button = ({ label, onClick }) => (
  <button onClick={onClick}>{label}</button>
);
\`\`\`

---

### 4. File & Folder Organization

Components are organized by purpose:

\`\`\`
components/
  ├── layout/     → Navbar, Footer
  ├── pages/      → Dashboard, Settings
  ├── ui/         → Button, Input, Card
\`\`\`

Each folder includes an \`index.js\` file for simplified imports:

\`\`\`js
import { Button, Input } from '../components/ui';
\`\`\`

---

### 5. Linting and Formatting

- **ESLint:** Enforced via \`eslint.config.mjs\`, with \`eslint-plugin-react\` and \`react-app\` base config.
- **Prettier:** Can be optionally used for auto-formatting. Aligns with our linting rules.

---

### 6. Styling with styled-components

We use [styled-components](https://styled-components.com) for CSS-in-JS:

\`\`\`js
const Button = styled.button\`
  background-color: \${props => props.theme.colors.primary};
  color: white;
  padding: 10px 20px;
  border: none;
  border-radius: 4px;
\`;
\`\`\`

Themes are injected via \`ThemeProvider\` and accessed through \`props.theme\`.

---

## 🧠 Object-Oriented Design Principles

We apply key OOP concepts throughout the project to structure components and logic effectively.

### 1. Polymorphism

**Concept:** Objects can take many forms—different behaviors depending on context.

**Example:** The \`Chart\` component in \`Chart.js\` uses the \`type\` prop to render different chart types like line, bar, or pie using the same component interface.

\`\`\`js
<Chart type="bar" data={barData} />
<Chart type="line" data={lineData} />
\`\`\`

---

### 2. Abstraction

**Concept:** Hiding internal implementation and exposing only necessary details.

**Example:** \`ThemeProvider\` abstracts theme management. Components access the theme using \`useTheme()\` without knowing how it's implemented behind the scenes.

\`\`\`js
const { theme } = useTheme();
\`\`\`

---

### 3. Inheritance

**Concept:** Components can inherit behavior and structure from base components.

**Example:** A styled \`SubtaskButton\` inherits styles from a base \`ActionButton\`:

\`\`\`js
const ActionButton = styled.button\`...\`;
const SubtaskButton = styled(ActionButton)\`
  background-color: lightgray;
\`;
\`\`\`

---

### 4. Encapsulation

**Concept:** Bundling data and methods that operate on that data within a single unit.

**Example:** The \`TaskItem\` component encapsulates all logic and UI related to displaying and updating a task:

\`\`\`js
const TaskItem = ({ task }) => {
  const handleComplete = () => { ... };
  return <div>{task.name}</div>;
};
\`\`\`

All related behavior stays within the component scope, improving modularity.

---

## ✅ Summary

These coding standards and object-oriented design patterns were followed throughout the development of this project to maintain consistency, scalability, and maintainability. The structure, naming, formatting, and principles reflect modern software engineering best practices and help ensure high-quality collaboration across the team.

> For additional reference, our standards are influenced by:
> - [React Official Documentation](https://reactjs.org/docs/getting-started.html)
